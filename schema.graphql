# This file was generated. Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"columns and relationships of \"Chat\""
type Chat {
    "An object relationship"
    ChatMembers: User
    "An array relationship"
    ChatMessages(
        "distinct select on columns"
        distinct_on: [Message_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Message_order_by!],
        "filter the rows returned"
        where: Message_bool_exp
    ): [Message!]!
    "An aggregate relationship"
    ChatMessages_aggregate(
        "distinct select on columns"
        distinct_on: [Message_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Message_order_by!],
        "filter the rows returned"
        where: Message_bool_exp
    ): Message_aggregate!
    created_at: timestamptz!
    id: uuid!
    imageUrl: String
    members: uuid
    title: String!
}

"aggregated selection of \"Chat\""
type Chat_aggregate {
    aggregate: Chat_aggregate_fields
    nodes: [Chat!]!
}

"aggregate fields of \"Chat\""
type Chat_aggregate_fields {
    count(columns: [Chat_select_column!], distinct: Boolean): Int!
    max: Chat_max_fields
    min: Chat_min_fields
}

"aggregate max on columns"
type Chat_max_fields {
    created_at: timestamptz
    id: uuid
    imageUrl: String
    members: uuid
    title: String
}

"aggregate min on columns"
type Chat_min_fields {
    created_at: timestamptz
    id: uuid
    imageUrl: String
    members: uuid
    title: String
}

"response of any mutation on the table \"Chat\""
type Chat_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [Chat!]!
}

"columns and relationships of \"Message\""
type Message {
    "An object relationship"
    Author: User!
    "An object relationship"
    Chat: Chat!
    "An object relationship"
    RepliedMessage: Message
    author: uuid!
    chat: uuid!
    content: String
    created_at: timestamptz!
    id: uuid!
    metadata(
        "JSON select path"
        path: String
    ): json
    repliedMessage: uuid
    status: String!
    type: String!
}

"aggregated selection of \"Message\""
type Message_aggregate {
    aggregate: Message_aggregate_fields
    nodes: [Message!]!
}

"aggregate fields of \"Message\""
type Message_aggregate_fields {
    count(columns: [Message_select_column!], distinct: Boolean): Int!
    max: Message_max_fields
    min: Message_min_fields
}

"aggregate max on columns"
type Message_max_fields {
    author: uuid
    chat: uuid
    content: String
    created_at: timestamptz
    id: uuid
    repliedMessage: uuid
    status: String
    type: String
}

"aggregate min on columns"
type Message_min_fields {
    author: uuid
    chat: uuid
    content: String
    created_at: timestamptz
    id: uuid
    repliedMessage: uuid
    status: String
    type: String
}

"response of any mutation on the table \"Message\""
type Message_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [Message!]!
}

"columns and relationships of \"User\""
type User {
    created_at: timestamptz!
    description: String
    id: uuid!
    imageUrl: String
    lastOnline: timestamptz
    metadata(
        "JSON select path"
        path: String
    ): json
    role: String!
    username: String!
}

"columns and relationships of \"User_Chat\""
type User_Chat {
    chatId: uuid!
    "An object relationship"
    chats: User
    id: bigint!
    "An object relationship"
    members: Chat
    userId: uuid!
}

"aggregated selection of \"User_Chat\""
type User_Chat_aggregate {
    aggregate: User_Chat_aggregate_fields
    nodes: [User_Chat!]!
}

"aggregate fields of \"User_Chat\""
type User_Chat_aggregate_fields {
    avg: User_Chat_avg_fields
    count(columns: [User_Chat_select_column!], distinct: Boolean): Int!
    max: User_Chat_max_fields
    min: User_Chat_min_fields
    stddev: User_Chat_stddev_fields
    stddev_pop: User_Chat_stddev_pop_fields
    stddev_samp: User_Chat_stddev_samp_fields
    sum: User_Chat_sum_fields
    var_pop: User_Chat_var_pop_fields
    var_samp: User_Chat_var_samp_fields
    variance: User_Chat_variance_fields
}

"aggregate avg on columns"
type User_Chat_avg_fields {
    id: Float
}

"aggregate max on columns"
type User_Chat_max_fields {
    chatId: uuid
    id: bigint
    userId: uuid
}

"aggregate min on columns"
type User_Chat_min_fields {
    chatId: uuid
    id: bigint
    userId: uuid
}

"response of any mutation on the table \"User_Chat\""
type User_Chat_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [User_Chat!]!
}

"aggregate stddev on columns"
type User_Chat_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type User_Chat_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type User_Chat_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type User_Chat_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type User_Chat_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type User_Chat_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type User_Chat_variance_fields {
    id: Float
}

"aggregated selection of \"User\""
type User_aggregate {
    aggregate: User_aggregate_fields
    nodes: [User!]!
}

"aggregate fields of \"User\""
type User_aggregate_fields {
    count(columns: [User_select_column!], distinct: Boolean): Int!
    max: User_max_fields
    min: User_min_fields
}

"aggregate max on columns"
type User_max_fields {
    created_at: timestamptz
    description: String
    id: uuid
    imageUrl: String
    lastOnline: timestamptz
    role: String
    username: String
}

"aggregate min on columns"
type User_min_fields {
    created_at: timestamptz
    description: String
    id: uuid
    imageUrl: String
    lastOnline: timestamptz
    role: String
    username: String
}

"response of any mutation on the table \"User\""
type User_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [User!]!
}

"columns and relationships of \"_manytomany.article\""
type _manytomany_article {
    "An array relationship"
    article_tags(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): [_manytomany_article_tag!]!
    "An aggregate relationship"
    article_tags_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): _manytomany_article_tag_aggregate!
    author_name: String!
    id: Int!
    title: String!
}

"aggregated selection of \"_manytomany.article\""
type _manytomany_article_aggregate {
    aggregate: _manytomany_article_aggregate_fields
    nodes: [_manytomany_article!]!
}

"aggregate fields of \"_manytomany.article\""
type _manytomany_article_aggregate_fields {
    avg: _manytomany_article_avg_fields
    count(columns: [_manytomany_article_select_column!], distinct: Boolean): Int!
    max: _manytomany_article_max_fields
    min: _manytomany_article_min_fields
    stddev: _manytomany_article_stddev_fields
    stddev_pop: _manytomany_article_stddev_pop_fields
    stddev_samp: _manytomany_article_stddev_samp_fields
    sum: _manytomany_article_sum_fields
    var_pop: _manytomany_article_var_pop_fields
    var_samp: _manytomany_article_var_samp_fields
    variance: _manytomany_article_variance_fields
}

"aggregate avg on columns"
type _manytomany_article_avg_fields {
    id: Float
}

"aggregate max on columns"
type _manytomany_article_max_fields {
    author_name: String
    id: Int
    title: String
}

"aggregate min on columns"
type _manytomany_article_min_fields {
    author_name: String
    id: Int
    title: String
}

"response of any mutation on the table \"_manytomany.article\""
type _manytomany_article_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [_manytomany_article!]!
}

"aggregate stddev on columns"
type _manytomany_article_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type _manytomany_article_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type _manytomany_article_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type _manytomany_article_sum_fields {
    id: Int
}

"columns and relationships of \"_manytomany.article_tag\""
type _manytomany_article_tag {
    "An object relationship"
    article: _manytomany_article!
    article_id: Int!
    id: Int!
    "An object relationship"
    tag: _manytomany_tag!
    tag_id: Int!
}

"aggregated selection of \"_manytomany.article_tag\""
type _manytomany_article_tag_aggregate {
    aggregate: _manytomany_article_tag_aggregate_fields
    nodes: [_manytomany_article_tag!]!
}

"aggregate fields of \"_manytomany.article_tag\""
type _manytomany_article_tag_aggregate_fields {
    avg: _manytomany_article_tag_avg_fields
    count(columns: [_manytomany_article_tag_select_column!], distinct: Boolean): Int!
    max: _manytomany_article_tag_max_fields
    min: _manytomany_article_tag_min_fields
    stddev: _manytomany_article_tag_stddev_fields
    stddev_pop: _manytomany_article_tag_stddev_pop_fields
    stddev_samp: _manytomany_article_tag_stddev_samp_fields
    sum: _manytomany_article_tag_sum_fields
    var_pop: _manytomany_article_tag_var_pop_fields
    var_samp: _manytomany_article_tag_var_samp_fields
    variance: _manytomany_article_tag_variance_fields
}

"aggregate avg on columns"
type _manytomany_article_tag_avg_fields {
    article_id: Float
    id: Float
    tag_id: Float
}

"aggregate max on columns"
type _manytomany_article_tag_max_fields {
    article_id: Int
    id: Int
    tag_id: Int
}

"aggregate min on columns"
type _manytomany_article_tag_min_fields {
    article_id: Int
    id: Int
    tag_id: Int
}

"response of any mutation on the table \"_manytomany.article_tag\""
type _manytomany_article_tag_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [_manytomany_article_tag!]!
}

"aggregate stddev on columns"
type _manytomany_article_tag_stddev_fields {
    article_id: Float
    id: Float
    tag_id: Float
}

"aggregate stddev_pop on columns"
type _manytomany_article_tag_stddev_pop_fields {
    article_id: Float
    id: Float
    tag_id: Float
}

"aggregate stddev_samp on columns"
type _manytomany_article_tag_stddev_samp_fields {
    article_id: Float
    id: Float
    tag_id: Float
}

"aggregate sum on columns"
type _manytomany_article_tag_sum_fields {
    article_id: Int
    id: Int
    tag_id: Int
}

"aggregate var_pop on columns"
type _manytomany_article_tag_var_pop_fields {
    article_id: Float
    id: Float
    tag_id: Float
}

"aggregate var_samp on columns"
type _manytomany_article_tag_var_samp_fields {
    article_id: Float
    id: Float
    tag_id: Float
}

"aggregate variance on columns"
type _manytomany_article_tag_variance_fields {
    article_id: Float
    id: Float
    tag_id: Float
}

"aggregate var_pop on columns"
type _manytomany_article_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type _manytomany_article_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type _manytomany_article_variance_fields {
    id: Float
}

"columns and relationships of \"_manytomany.tag\""
type _manytomany_tag {
    "An array relationship"
    article_tags(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): [_manytomany_article_tag!]!
    "An aggregate relationship"
    article_tags_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): _manytomany_article_tag_aggregate!
    id: Int!
    name: String!
    "An array relationship"
    sheesh(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): [_manytomany_article_tag!]!
    "An aggregate relationship"
    sheesh_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): _manytomany_article_tag_aggregate!
}

"aggregated selection of \"_manytomany.tag\""
type _manytomany_tag_aggregate {
    aggregate: _manytomany_tag_aggregate_fields
    nodes: [_manytomany_tag!]!
}

"aggregate fields of \"_manytomany.tag\""
type _manytomany_tag_aggregate_fields {
    avg: _manytomany_tag_avg_fields
    count(columns: [_manytomany_tag_select_column!], distinct: Boolean): Int!
    max: _manytomany_tag_max_fields
    min: _manytomany_tag_min_fields
    stddev: _manytomany_tag_stddev_fields
    stddev_pop: _manytomany_tag_stddev_pop_fields
    stddev_samp: _manytomany_tag_stddev_samp_fields
    sum: _manytomany_tag_sum_fields
    var_pop: _manytomany_tag_var_pop_fields
    var_samp: _manytomany_tag_var_samp_fields
    variance: _manytomany_tag_variance_fields
}

"aggregate avg on columns"
type _manytomany_tag_avg_fields {
    id: Float
}

"aggregate max on columns"
type _manytomany_tag_max_fields {
    id: Int
    name: String
}

"aggregate min on columns"
type _manytomany_tag_min_fields {
    id: Int
    name: String
}

"response of any mutation on the table \"_manytomany.tag\""
type _manytomany_tag_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [_manytomany_tag!]!
}

"aggregate stddev on columns"
type _manytomany_tag_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type _manytomany_tag_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type _manytomany_tag_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type _manytomany_tag_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type _manytomany_tag_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type _manytomany_tag_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type _manytomany_tag_variance_fields {
    id: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"Chat\""
    delete_Chat(
        "filter the rows which have to be deleted"
        where: Chat_bool_exp!
    ): Chat_mutation_response
    "delete single row from the table: \"Chat\""
    delete_Chat_by_pk(id: uuid!): Chat
    "delete data from the table: \"Message\""
    delete_Message(
        "filter the rows which have to be deleted"
        where: Message_bool_exp!
    ): Message_mutation_response
    "delete single row from the table: \"Message\""
    delete_Message_by_pk(id: uuid!): Message
    "delete data from the table: \"User\""
    delete_User(
        "filter the rows which have to be deleted"
        where: User_bool_exp!
    ): User_mutation_response
    "delete data from the table: \"User_Chat\""
    delete_User_Chat(
        "filter the rows which have to be deleted"
        where: User_Chat_bool_exp!
    ): User_Chat_mutation_response
    "delete single row from the table: \"User_Chat\""
    delete_User_Chat_by_pk(id: bigint!): User_Chat
    "delete single row from the table: \"User\""
    delete_User_by_pk(id: uuid!): User
    "delete data from the table: \"_manytomany.article\""
    delete__manytomany_article(
        "filter the rows which have to be deleted"
        where: _manytomany_article_bool_exp!
    ): _manytomany_article_mutation_response
    "delete single row from the table: \"_manytomany.article\""
    delete__manytomany_article_by_pk(id: Int!): _manytomany_article
    "delete data from the table: \"_manytomany.article_tag\""
    delete__manytomany_article_tag(
        "filter the rows which have to be deleted"
        where: _manytomany_article_tag_bool_exp!
    ): _manytomany_article_tag_mutation_response
    "delete single row from the table: \"_manytomany.article_tag\""
    delete__manytomany_article_tag_by_pk(id: Int!): _manytomany_article_tag
    "delete data from the table: \"_manytomany.tag\""
    delete__manytomany_tag(
        "filter the rows which have to be deleted"
        where: _manytomany_tag_bool_exp!
    ): _manytomany_tag_mutation_response
    "delete single row from the table: \"_manytomany.tag\""
    delete__manytomany_tag_by_pk(id: Int!): _manytomany_tag
    "insert data into the table: \"Chat\""
    insert_Chat(
        "the rows to be inserted"
        objects: [Chat_insert_input!]!,
        "upsert condition"
        on_conflict: Chat_on_conflict
    ): Chat_mutation_response
    "insert a single row into the table: \"Chat\""
    insert_Chat_one(
        "the row to be inserted"
        object: Chat_insert_input!,
        "upsert condition"
        on_conflict: Chat_on_conflict
    ): Chat
    "insert data into the table: \"Message\""
    insert_Message(
        "the rows to be inserted"
        objects: [Message_insert_input!]!,
        "upsert condition"
        on_conflict: Message_on_conflict
    ): Message_mutation_response
    "insert a single row into the table: \"Message\""
    insert_Message_one(
        "the row to be inserted"
        object: Message_insert_input!,
        "upsert condition"
        on_conflict: Message_on_conflict
    ): Message
    "insert data into the table: \"User\""
    insert_User(
        "the rows to be inserted"
        objects: [User_insert_input!]!,
        "upsert condition"
        on_conflict: User_on_conflict
    ): User_mutation_response
    "insert data into the table: \"User_Chat\""
    insert_User_Chat(
        "the rows to be inserted"
        objects: [User_Chat_insert_input!]!,
        "upsert condition"
        on_conflict: User_Chat_on_conflict
    ): User_Chat_mutation_response
    "insert a single row into the table: \"User_Chat\""
    insert_User_Chat_one(
        "the row to be inserted"
        object: User_Chat_insert_input!,
        "upsert condition"
        on_conflict: User_Chat_on_conflict
    ): User_Chat
    "insert a single row into the table: \"User\""
    insert_User_one(
        "the row to be inserted"
        object: User_insert_input!,
        "upsert condition"
        on_conflict: User_on_conflict
    ): User
    "insert data into the table: \"_manytomany.article\""
    insert__manytomany_article(
        "the rows to be inserted"
        objects: [_manytomany_article_insert_input!]!,
        "upsert condition"
        on_conflict: _manytomany_article_on_conflict
    ): _manytomany_article_mutation_response
    "insert a single row into the table: \"_manytomany.article\""
    insert__manytomany_article_one(
        "the row to be inserted"
        object: _manytomany_article_insert_input!,
        "upsert condition"
        on_conflict: _manytomany_article_on_conflict
    ): _manytomany_article
    "insert data into the table: \"_manytomany.article_tag\""
    insert__manytomany_article_tag(
        "the rows to be inserted"
        objects: [_manytomany_article_tag_insert_input!]!,
        "upsert condition"
        on_conflict: _manytomany_article_tag_on_conflict
    ): _manytomany_article_tag_mutation_response
    "insert a single row into the table: \"_manytomany.article_tag\""
    insert__manytomany_article_tag_one(
        "the row to be inserted"
        object: _manytomany_article_tag_insert_input!,
        "upsert condition"
        on_conflict: _manytomany_article_tag_on_conflict
    ): _manytomany_article_tag
    "insert data into the table: \"_manytomany.tag\""
    insert__manytomany_tag(
        "the rows to be inserted"
        objects: [_manytomany_tag_insert_input!]!,
        "upsert condition"
        on_conflict: _manytomany_tag_on_conflict
    ): _manytomany_tag_mutation_response
    "insert a single row into the table: \"_manytomany.tag\""
    insert__manytomany_tag_one(
        "the row to be inserted"
        object: _manytomany_tag_insert_input!,
        "upsert condition"
        on_conflict: _manytomany_tag_on_conflict
    ): _manytomany_tag
    "update data of the table: \"Chat\""
    update_Chat(
        "sets the columns of the filtered rows to the given values"
        _set: Chat_set_input,
        "filter the rows which have to be updated"
        where: Chat_bool_exp!
    ): Chat_mutation_response
    "update single row of the table: \"Chat\""
    update_Chat_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: Chat_set_input,
        pk_columns: Chat_pk_columns_input!
    ): Chat
    "update multiples rows of table: \"Chat\""
    update_Chat_many(
        "updates to execute, in order"
        updates: [Chat_updates!]!
    ): [Chat_mutation_response]
    "update data of the table: \"Message\""
    update_Message(
        "sets the columns of the filtered rows to the given values"
        _set: Message_set_input,
        "filter the rows which have to be updated"
        where: Message_bool_exp!
    ): Message_mutation_response
    "update single row of the table: \"Message\""
    update_Message_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: Message_set_input,
        pk_columns: Message_pk_columns_input!
    ): Message
    "update multiples rows of table: \"Message\""
    update_Message_many(
        "updates to execute, in order"
        updates: [Message_updates!]!
    ): [Message_mutation_response]
    "update data of the table: \"User\""
    update_User(
        "sets the columns of the filtered rows to the given values"
        _set: User_set_input,
        "filter the rows which have to be updated"
        where: User_bool_exp!
    ): User_mutation_response
    "update data of the table: \"User_Chat\""
    update_User_Chat(
        "increments the numeric columns with given value of the filtered values"
        _inc: User_Chat_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: User_Chat_set_input,
        "filter the rows which have to be updated"
        where: User_Chat_bool_exp!
    ): User_Chat_mutation_response
    "update single row of the table: \"User_Chat\""
    update_User_Chat_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: User_Chat_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: User_Chat_set_input,
        pk_columns: User_Chat_pk_columns_input!
    ): User_Chat
    "update multiples rows of table: \"User_Chat\""
    update_User_Chat_many(
        "updates to execute, in order"
        updates: [User_Chat_updates!]!
    ): [User_Chat_mutation_response]
    "update single row of the table: \"User\""
    update_User_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: User_set_input,
        pk_columns: User_pk_columns_input!
    ): User
    "update multiples rows of table: \"User\""
    update_User_many(
        "updates to execute, in order"
        updates: [User_updates!]!
    ): [User_mutation_response]
    "update data of the table: \"_manytomany.article\""
    update__manytomany_article(
        "increments the numeric columns with given value of the filtered values"
        _inc: _manytomany_article_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: _manytomany_article_set_input,
        "filter the rows which have to be updated"
        where: _manytomany_article_bool_exp!
    ): _manytomany_article_mutation_response
    "update single row of the table: \"_manytomany.article\""
    update__manytomany_article_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: _manytomany_article_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: _manytomany_article_set_input,
        pk_columns: _manytomany_article_pk_columns_input!
    ): _manytomany_article
    "update multiples rows of table: \"_manytomany.article\""
    update__manytomany_article_many(
        "updates to execute, in order"
        updates: [_manytomany_article_updates!]!
    ): [_manytomany_article_mutation_response]
    "update data of the table: \"_manytomany.article_tag\""
    update__manytomany_article_tag(
        "increments the numeric columns with given value of the filtered values"
        _inc: _manytomany_article_tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: _manytomany_article_tag_set_input,
        "filter the rows which have to be updated"
        where: _manytomany_article_tag_bool_exp!
    ): _manytomany_article_tag_mutation_response
    "update single row of the table: \"_manytomany.article_tag\""
    update__manytomany_article_tag_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: _manytomany_article_tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: _manytomany_article_tag_set_input,
        pk_columns: _manytomany_article_tag_pk_columns_input!
    ): _manytomany_article_tag
    "update multiples rows of table: \"_manytomany.article_tag\""
    update__manytomany_article_tag_many(
        "updates to execute, in order"
        updates: [_manytomany_article_tag_updates!]!
    ): [_manytomany_article_tag_mutation_response]
    "update data of the table: \"_manytomany.tag\""
    update__manytomany_tag(
        "increments the numeric columns with given value of the filtered values"
        _inc: _manytomany_tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: _manytomany_tag_set_input,
        "filter the rows which have to be updated"
        where: _manytomany_tag_bool_exp!
    ): _manytomany_tag_mutation_response
    "update single row of the table: \"_manytomany.tag\""
    update__manytomany_tag_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: _manytomany_tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: _manytomany_tag_set_input,
        pk_columns: _manytomany_tag_pk_columns_input!
    ): _manytomany_tag
    "update multiples rows of table: \"_manytomany.tag\""
    update__manytomany_tag_many(
        "updates to execute, in order"
        updates: [_manytomany_tag_updates!]!
    ): [_manytomany_tag_mutation_response]
}

type query_root {
    "fetch data from the table: \"Chat\""
    Chat(
        "distinct select on columns"
        distinct_on: [Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Chat_order_by!],
        "filter the rows returned"
        where: Chat_bool_exp
    ): [Chat!]!
    "fetch aggregated fields from the table: \"Chat\""
    Chat_aggregate(
        "distinct select on columns"
        distinct_on: [Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Chat_order_by!],
        "filter the rows returned"
        where: Chat_bool_exp
    ): Chat_aggregate!
    "fetch data from the table: \"Chat\" using primary key columns"
    Chat_by_pk(id: uuid!): Chat
    "fetch data from the table: \"Message\""
    Message(
        "distinct select on columns"
        distinct_on: [Message_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Message_order_by!],
        "filter the rows returned"
        where: Message_bool_exp
    ): [Message!]!
    "fetch aggregated fields from the table: \"Message\""
    Message_aggregate(
        "distinct select on columns"
        distinct_on: [Message_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Message_order_by!],
        "filter the rows returned"
        where: Message_bool_exp
    ): Message_aggregate!
    "fetch data from the table: \"Message\" using primary key columns"
    Message_by_pk(id: uuid!): Message
    "fetch data from the table: \"User\""
    User(
        "distinct select on columns"
        distinct_on: [User_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_order_by!],
        "filter the rows returned"
        where: User_bool_exp
    ): [User!]!
    "fetch data from the table: \"User_Chat\""
    User_Chat(
        "distinct select on columns"
        distinct_on: [User_Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_Chat_order_by!],
        "filter the rows returned"
        where: User_Chat_bool_exp
    ): [User_Chat!]!
    "fetch aggregated fields from the table: \"User_Chat\""
    User_Chat_aggregate(
        "distinct select on columns"
        distinct_on: [User_Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_Chat_order_by!],
        "filter the rows returned"
        where: User_Chat_bool_exp
    ): User_Chat_aggregate!
    "fetch data from the table: \"User_Chat\" using primary key columns"
    User_Chat_by_pk(id: bigint!): User_Chat
    "fetch aggregated fields from the table: \"User\""
    User_aggregate(
        "distinct select on columns"
        distinct_on: [User_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_order_by!],
        "filter the rows returned"
        where: User_bool_exp
    ): User_aggregate!
    "fetch data from the table: \"User\" using primary key columns"
    User_by_pk(id: uuid!): User
    "fetch data from the table: \"_manytomany.article\""
    _manytomany_article(
        "distinct select on columns"
        distinct_on: [_manytomany_article_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_order_by!],
        "filter the rows returned"
        where: _manytomany_article_bool_exp
    ): [_manytomany_article!]!
    "fetch aggregated fields from the table: \"_manytomany.article\""
    _manytomany_article_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_article_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_order_by!],
        "filter the rows returned"
        where: _manytomany_article_bool_exp
    ): _manytomany_article_aggregate!
    "fetch data from the table: \"_manytomany.article\" using primary key columns"
    _manytomany_article_by_pk(id: Int!): _manytomany_article
    "fetch data from the table: \"_manytomany.article_tag\""
    _manytomany_article_tag(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): [_manytomany_article_tag!]!
    "fetch aggregated fields from the table: \"_manytomany.article_tag\""
    _manytomany_article_tag_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): _manytomany_article_tag_aggregate!
    "fetch data from the table: \"_manytomany.article_tag\" using primary key columns"
    _manytomany_article_tag_by_pk(id: Int!): _manytomany_article_tag
    "fetch data from the table: \"_manytomany.tag\""
    _manytomany_tag(
        "distinct select on columns"
        distinct_on: [_manytomany_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_tag_bool_exp
    ): [_manytomany_tag!]!
    "fetch aggregated fields from the table: \"_manytomany.tag\""
    _manytomany_tag_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_tag_bool_exp
    ): _manytomany_tag_aggregate!
    "fetch data from the table: \"_manytomany.tag\" using primary key columns"
    _manytomany_tag_by_pk(id: Int!): _manytomany_tag
}

type subscription_root {
    "fetch data from the table: \"Chat\""
    Chat(
        "distinct select on columns"
        distinct_on: [Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Chat_order_by!],
        "filter the rows returned"
        where: Chat_bool_exp
    ): [Chat!]!
    "fetch aggregated fields from the table: \"Chat\""
    Chat_aggregate(
        "distinct select on columns"
        distinct_on: [Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Chat_order_by!],
        "filter the rows returned"
        where: Chat_bool_exp
    ): Chat_aggregate!
    "fetch data from the table: \"Chat\" using primary key columns"
    Chat_by_pk(id: uuid!): Chat
    "fetch data from the table in a streaming manner: \"Chat\""
    Chat_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [Chat_stream_cursor_input]!,
        "filter the rows returned"
        where: Chat_bool_exp
    ): [Chat!]!
    "fetch data from the table: \"Message\""
    Message(
        "distinct select on columns"
        distinct_on: [Message_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Message_order_by!],
        "filter the rows returned"
        where: Message_bool_exp
    ): [Message!]!
    "fetch aggregated fields from the table: \"Message\""
    Message_aggregate(
        "distinct select on columns"
        distinct_on: [Message_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [Message_order_by!],
        "filter the rows returned"
        where: Message_bool_exp
    ): Message_aggregate!
    "fetch data from the table: \"Message\" using primary key columns"
    Message_by_pk(id: uuid!): Message
    "fetch data from the table in a streaming manner: \"Message\""
    Message_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [Message_stream_cursor_input]!,
        "filter the rows returned"
        where: Message_bool_exp
    ): [Message!]!
    "fetch data from the table: \"User\""
    User(
        "distinct select on columns"
        distinct_on: [User_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_order_by!],
        "filter the rows returned"
        where: User_bool_exp
    ): [User!]!
    "fetch data from the table: \"User_Chat\""
    User_Chat(
        "distinct select on columns"
        distinct_on: [User_Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_Chat_order_by!],
        "filter the rows returned"
        where: User_Chat_bool_exp
    ): [User_Chat!]!
    "fetch aggregated fields from the table: \"User_Chat\""
    User_Chat_aggregate(
        "distinct select on columns"
        distinct_on: [User_Chat_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_Chat_order_by!],
        "filter the rows returned"
        where: User_Chat_bool_exp
    ): User_Chat_aggregate!
    "fetch data from the table: \"User_Chat\" using primary key columns"
    User_Chat_by_pk(id: bigint!): User_Chat
    "fetch data from the table in a streaming manner: \"User_Chat\""
    User_Chat_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [User_Chat_stream_cursor_input]!,
        "filter the rows returned"
        where: User_Chat_bool_exp
    ): [User_Chat!]!
    "fetch aggregated fields from the table: \"User\""
    User_aggregate(
        "distinct select on columns"
        distinct_on: [User_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [User_order_by!],
        "filter the rows returned"
        where: User_bool_exp
    ): User_aggregate!
    "fetch data from the table: \"User\" using primary key columns"
    User_by_pk(id: uuid!): User
    "fetch data from the table in a streaming manner: \"User\""
    User_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [User_stream_cursor_input]!,
        "filter the rows returned"
        where: User_bool_exp
    ): [User!]!
    "fetch data from the table: \"_manytomany.article\""
    _manytomany_article(
        "distinct select on columns"
        distinct_on: [_manytomany_article_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_order_by!],
        "filter the rows returned"
        where: _manytomany_article_bool_exp
    ): [_manytomany_article!]!
    "fetch aggregated fields from the table: \"_manytomany.article\""
    _manytomany_article_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_article_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_order_by!],
        "filter the rows returned"
        where: _manytomany_article_bool_exp
    ): _manytomany_article_aggregate!
    "fetch data from the table: \"_manytomany.article\" using primary key columns"
    _manytomany_article_by_pk(id: Int!): _manytomany_article
    "fetch data from the table in a streaming manner: \"_manytomany.article\""
    _manytomany_article_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [_manytomany_article_stream_cursor_input]!,
        "filter the rows returned"
        where: _manytomany_article_bool_exp
    ): [_manytomany_article!]!
    "fetch data from the table: \"_manytomany.article_tag\""
    _manytomany_article_tag(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): [_manytomany_article_tag!]!
    "fetch aggregated fields from the table: \"_manytomany.article_tag\""
    _manytomany_article_tag_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_article_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_article_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): _manytomany_article_tag_aggregate!
    "fetch data from the table: \"_manytomany.article_tag\" using primary key columns"
    _manytomany_article_tag_by_pk(id: Int!): _manytomany_article_tag
    "fetch data from the table in a streaming manner: \"_manytomany.article_tag\""
    _manytomany_article_tag_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [_manytomany_article_tag_stream_cursor_input]!,
        "filter the rows returned"
        where: _manytomany_article_tag_bool_exp
    ): [_manytomany_article_tag!]!
    "fetch data from the table: \"_manytomany.tag\""
    _manytomany_tag(
        "distinct select on columns"
        distinct_on: [_manytomany_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_tag_bool_exp
    ): [_manytomany_tag!]!
    "fetch aggregated fields from the table: \"_manytomany.tag\""
    _manytomany_tag_aggregate(
        "distinct select on columns"
        distinct_on: [_manytomany_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [_manytomany_tag_order_by!],
        "filter the rows returned"
        where: _manytomany_tag_bool_exp
    ): _manytomany_tag_aggregate!
    "fetch data from the table: \"_manytomany.tag\" using primary key columns"
    _manytomany_tag_by_pk(id: Int!): _manytomany_tag
    "fetch data from the table in a streaming manner: \"_manytomany.tag\""
    _manytomany_tag_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [_manytomany_tag_stream_cursor_input]!,
        "filter the rows returned"
        where: _manytomany_tag_bool_exp
    ): [_manytomany_tag!]!
}

"unique or primary key constraints on table \"Chat\""
enum Chat_constraint {
    "unique or primary key constraint on columns \"id\""
    Chat_pkey
}

"select columns of table \"Chat\""
enum Chat_select_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    imageUrl
    "column name"
    members
    "column name"
    title
}

"update columns of table \"Chat\""
enum Chat_update_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    imageUrl
    "column name"
    members
    "column name"
    title
}

"unique or primary key constraints on table \"Message\""
enum Message_constraint {
    "unique or primary key constraint on columns \"id\""
    Message_pkey
}

"select columns of table \"Message\""
enum Message_select_column {
    "column name"
    author
    "column name"
    chat
    "column name"
    content
    "column name"
    created_at
    "column name"
    id
    "column name"
    metadata
    "column name"
    repliedMessage
    "column name"
    status
    "column name"
    type
}

"update columns of table \"Message\""
enum Message_update_column {
    "column name"
    author
    "column name"
    chat
    "column name"
    content
    "column name"
    created_at
    "column name"
    id
    "column name"
    metadata
    "column name"
    repliedMessage
    "column name"
    status
    "column name"
    type
}

"unique or primary key constraints on table \"User_Chat\""
enum User_Chat_constraint {
    "unique or primary key constraint on columns \"id\""
    User_Chat_pkey
}

"select columns of table \"User_Chat\""
enum User_Chat_select_column {
    "column name"
    chatId
    "column name"
    id
    "column name"
    userId
}

"update columns of table \"User_Chat\""
enum User_Chat_update_column {
    "column name"
    chatId
    "column name"
    id
    "column name"
    userId
}

"unique or primary key constraints on table \"User\""
enum User_constraint {
    "unique or primary key constraint on columns \"id\""
    User_pkey
}

"select columns of table \"User\""
enum User_select_column {
    "column name"
    created_at
    "column name"
    description
    "column name"
    id
    "column name"
    imageUrl
    "column name"
    lastOnline
    "column name"
    metadata
    "column name"
    role
    "column name"
    username
}

"update columns of table \"User\""
enum User_update_column {
    "column name"
    created_at
    "column name"
    description
    "column name"
    id
    "column name"
    imageUrl
    "column name"
    lastOnline
    "column name"
    metadata
    "column name"
    role
    "column name"
    username
}

"unique or primary key constraints on table \"_manytomany.article\""
enum _manytomany_article_constraint {
    "unique or primary key constraint on columns \"id\""
    article_pkey
}

"select columns of table \"_manytomany.article\""
enum _manytomany_article_select_column {
    "column name"
    author_name
    "column name"
    id
    "column name"
    title
}

"unique or primary key constraints on table \"_manytomany.article_tag\""
enum _manytomany_article_tag_constraint {
    "unique or primary key constraint on columns \"id\""
    article_tag_pkey
}

"select columns of table \"_manytomany.article_tag\""
enum _manytomany_article_tag_select_column {
    "column name"
    article_id
    "column name"
    id
    "column name"
    tag_id
}

"update columns of table \"_manytomany.article_tag\""
enum _manytomany_article_tag_update_column {
    "column name"
    article_id
    "column name"
    id
    "column name"
    tag_id
}

"update columns of table \"_manytomany.article\""
enum _manytomany_article_update_column {
    "column name"
    author_name
    "column name"
    id
    "column name"
    title
}

"unique or primary key constraints on table \"_manytomany.tag\""
enum _manytomany_tag_constraint {
    "unique or primary key constraint on columns \"id\""
    tag_pkey
}

"select columns of table \"_manytomany.tag\""
enum _manytomany_tag_select_column {
    "column name"
    id
    "column name"
    name
}

"update columns of table \"_manytomany.tag\""
enum _manytomany_tag_update_column {
    "column name"
    id
    "column name"
    name
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

scalar bigint

scalar json

scalar timestamptz

scalar uuid

"Boolean expression to filter rows from the table \"Chat\". All fields are combined with a logical 'AND'."
input Chat_bool_exp {
    ChatMembers: User_bool_exp
    ChatMessages: Message_bool_exp
    ChatMessages_aggregate: Message_aggregate_bool_exp
    _and: [Chat_bool_exp!]
    _not: Chat_bool_exp
    _or: [Chat_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    imageUrl: String_comparison_exp
    members: uuid_comparison_exp
    title: String_comparison_exp
}

"input type for inserting data into table \"Chat\""
input Chat_insert_input {
    ChatMembers: User_obj_rel_insert_input
    ChatMessages: Message_arr_rel_insert_input
    created_at: timestamptz
    id: uuid
    imageUrl: String
    members: uuid
    title: String
}

"input type for inserting object relation for remote table \"Chat\""
input Chat_obj_rel_insert_input {
    data: Chat_insert_input!
    "upsert condition"
    on_conflict: Chat_on_conflict
}

"on_conflict condition type for table \"Chat\""
input Chat_on_conflict {
    constraint: Chat_constraint!
    update_columns: [Chat_update_column!]! = []
    where: Chat_bool_exp
}

"Ordering options when selecting data from \"Chat\"."
input Chat_order_by {
    ChatMembers: User_order_by
    ChatMessages_aggregate: Message_aggregate_order_by
    created_at: order_by
    id: order_by
    imageUrl: order_by
    members: order_by
    title: order_by
}

"primary key columns input for table: Chat"
input Chat_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"Chat\""
input Chat_set_input {
    created_at: timestamptz
    id: uuid
    imageUrl: String
    members: uuid
    title: String
}

"Streaming cursor of the table \"Chat\""
input Chat_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: Chat_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input Chat_stream_cursor_value_input {
    created_at: timestamptz
    id: uuid
    imageUrl: String
    members: uuid
    title: String
}

input Chat_updates {
    "sets the columns of the filtered rows to the given values"
    _set: Chat_set_input
    "filter the rows which have to be updated"
    where: Chat_bool_exp!
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

input Message_aggregate_bool_exp {
    count: Message_aggregate_bool_exp_count
}

input Message_aggregate_bool_exp_count {
    arguments: [Message_select_column!]
    distinct: Boolean
    filter: Message_bool_exp
    predicate: Int_comparison_exp!
}

"order by aggregate values of table \"Message\""
input Message_aggregate_order_by {
    count: order_by
    max: Message_max_order_by
    min: Message_min_order_by
}

"input type for inserting array relation for remote table \"Message\""
input Message_arr_rel_insert_input {
    data: [Message_insert_input!]!
    "upsert condition"
    on_conflict: Message_on_conflict
}

"Boolean expression to filter rows from the table \"Message\". All fields are combined with a logical 'AND'."
input Message_bool_exp {
    Author: User_bool_exp
    Chat: Chat_bool_exp
    RepliedMessage: Message_bool_exp
    _and: [Message_bool_exp!]
    _not: Message_bool_exp
    _or: [Message_bool_exp!]
    author: uuid_comparison_exp
    chat: uuid_comparison_exp
    content: String_comparison_exp
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    metadata: json_comparison_exp
    repliedMessage: uuid_comparison_exp
    status: String_comparison_exp
    type: String_comparison_exp
}

"input type for inserting data into table \"Message\""
input Message_insert_input {
    Author: User_obj_rel_insert_input
    Chat: Chat_obj_rel_insert_input
    RepliedMessage: Message_obj_rel_insert_input
    author: uuid
    chat: uuid
    content: String
    created_at: timestamptz
    id: uuid
    metadata: json
    repliedMessage: uuid
    status: String
    type: String
}

"order by max() on columns of table \"Message\""
input Message_max_order_by {
    author: order_by
    chat: order_by
    content: order_by
    created_at: order_by
    id: order_by
    repliedMessage: order_by
    status: order_by
    type: order_by
}

"order by min() on columns of table \"Message\""
input Message_min_order_by {
    author: order_by
    chat: order_by
    content: order_by
    created_at: order_by
    id: order_by
    repliedMessage: order_by
    status: order_by
    type: order_by
}

"input type for inserting object relation for remote table \"Message\""
input Message_obj_rel_insert_input {
    data: Message_insert_input!
    "upsert condition"
    on_conflict: Message_on_conflict
}

"on_conflict condition type for table \"Message\""
input Message_on_conflict {
    constraint: Message_constraint!
    update_columns: [Message_update_column!]! = []
    where: Message_bool_exp
}

"Ordering options when selecting data from \"Message\"."
input Message_order_by {
    Author: User_order_by
    Chat: Chat_order_by
    RepliedMessage: Message_order_by
    author: order_by
    chat: order_by
    content: order_by
    created_at: order_by
    id: order_by
    metadata: order_by
    repliedMessage: order_by
    status: order_by
    type: order_by
}

"primary key columns input for table: Message"
input Message_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"Message\""
input Message_set_input {
    author: uuid
    chat: uuid
    content: String
    created_at: timestamptz
    id: uuid
    metadata: json
    repliedMessage: uuid
    status: String
    type: String
}

"Streaming cursor of the table \"Message\""
input Message_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: Message_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input Message_stream_cursor_value_input {
    author: uuid
    chat: uuid
    content: String
    created_at: timestamptz
    id: uuid
    metadata: json
    repliedMessage: uuid
    status: String
    type: String
}

input Message_updates {
    "sets the columns of the filtered rows to the given values"
    _set: Message_set_input
    "filter the rows which have to be updated"
    where: Message_bool_exp!
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"User_Chat\". All fields are combined with a logical 'AND'."
input User_Chat_bool_exp {
    _and: [User_Chat_bool_exp!]
    _not: User_Chat_bool_exp
    _or: [User_Chat_bool_exp!]
    chatId: uuid_comparison_exp
    chats: User_bool_exp
    id: bigint_comparison_exp
    members: Chat_bool_exp
    userId: uuid_comparison_exp
}

"input type for incrementing numeric columns in table \"User_Chat\""
input User_Chat_inc_input {
    id: bigint
}

"input type for inserting data into table \"User_Chat\""
input User_Chat_insert_input {
    chatId: uuid
    chats: User_obj_rel_insert_input
    id: bigint
    members: Chat_obj_rel_insert_input
    userId: uuid
}

"on_conflict condition type for table \"User_Chat\""
input User_Chat_on_conflict {
    constraint: User_Chat_constraint!
    update_columns: [User_Chat_update_column!]! = []
    where: User_Chat_bool_exp
}

"Ordering options when selecting data from \"User_Chat\"."
input User_Chat_order_by {
    chatId: order_by
    chats: User_order_by
    id: order_by
    members: Chat_order_by
    userId: order_by
}

"primary key columns input for table: User_Chat"
input User_Chat_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"User_Chat\""
input User_Chat_set_input {
    chatId: uuid
    id: bigint
    userId: uuid
}

"Streaming cursor of the table \"User_Chat\""
input User_Chat_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: User_Chat_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input User_Chat_stream_cursor_value_input {
    chatId: uuid
    id: bigint
    userId: uuid
}

input User_Chat_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: User_Chat_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: User_Chat_set_input
    "filter the rows which have to be updated"
    where: User_Chat_bool_exp!
}

"Boolean expression to filter rows from the table \"User\". All fields are combined with a logical 'AND'."
input User_bool_exp {
    _and: [User_bool_exp!]
    _not: User_bool_exp
    _or: [User_bool_exp!]
    created_at: timestamptz_comparison_exp
    description: String_comparison_exp
    id: uuid_comparison_exp
    imageUrl: String_comparison_exp
    lastOnline: timestamptz_comparison_exp
    metadata: json_comparison_exp
    role: String_comparison_exp
    username: String_comparison_exp
}

"input type for inserting data into table \"User\""
input User_insert_input {
    created_at: timestamptz
    description: String
    id: uuid
    imageUrl: String
    lastOnline: timestamptz
    metadata: json
    role: String
    username: String
}

"input type for inserting object relation for remote table \"User\""
input User_obj_rel_insert_input {
    data: User_insert_input!
    "upsert condition"
    on_conflict: User_on_conflict
}

"on_conflict condition type for table \"User\""
input User_on_conflict {
    constraint: User_constraint!
    update_columns: [User_update_column!]! = []
    where: User_bool_exp
}

"Ordering options when selecting data from \"User\"."
input User_order_by {
    created_at: order_by
    description: order_by
    id: order_by
    imageUrl: order_by
    lastOnline: order_by
    metadata: order_by
    role: order_by
    username: order_by
}

"primary key columns input for table: User"
input User_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"User\""
input User_set_input {
    created_at: timestamptz
    description: String
    id: uuid
    imageUrl: String
    lastOnline: timestamptz
    metadata: json
    role: String
    username: String
}

"Streaming cursor of the table \"User\""
input User_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: User_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input User_stream_cursor_value_input {
    created_at: timestamptz
    description: String
    id: uuid
    imageUrl: String
    lastOnline: timestamptz
    metadata: json
    role: String
    username: String
}

input User_updates {
    "sets the columns of the filtered rows to the given values"
    _set: User_set_input
    "filter the rows which have to be updated"
    where: User_bool_exp!
}

"Boolean expression to filter rows from the table \"_manytomany.article\". All fields are combined with a logical 'AND'."
input _manytomany_article_bool_exp {
    _and: [_manytomany_article_bool_exp!]
    _not: _manytomany_article_bool_exp
    _or: [_manytomany_article_bool_exp!]
    article_tags: _manytomany_article_tag_bool_exp
    article_tags_aggregate: _manytomany_article_tag_aggregate_bool_exp
    author_name: String_comparison_exp
    id: Int_comparison_exp
    title: String_comparison_exp
}

"input type for incrementing numeric columns in table \"_manytomany.article\""
input _manytomany_article_inc_input {
    id: Int
}

"input type for inserting data into table \"_manytomany.article\""
input _manytomany_article_insert_input {
    article_tags: _manytomany_article_tag_arr_rel_insert_input
    author_name: String
    id: Int
    title: String
}

"input type for inserting object relation for remote table \"_manytomany.article\""
input _manytomany_article_obj_rel_insert_input {
    data: _manytomany_article_insert_input!
    "upsert condition"
    on_conflict: _manytomany_article_on_conflict
}

"on_conflict condition type for table \"_manytomany.article\""
input _manytomany_article_on_conflict {
    constraint: _manytomany_article_constraint!
    update_columns: [_manytomany_article_update_column!]! = []
    where: _manytomany_article_bool_exp
}

"Ordering options when selecting data from \"_manytomany.article\"."
input _manytomany_article_order_by {
    article_tags_aggregate: _manytomany_article_tag_aggregate_order_by
    author_name: order_by
    id: order_by
    title: order_by
}

"primary key columns input for table: _manytomany.article"
input _manytomany_article_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"_manytomany.article\""
input _manytomany_article_set_input {
    author_name: String
    id: Int
    title: String
}

"Streaming cursor of the table \"_manytomany_article\""
input _manytomany_article_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: _manytomany_article_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input _manytomany_article_stream_cursor_value_input {
    author_name: String
    id: Int
    title: String
}

input _manytomany_article_tag_aggregate_bool_exp {
    count: _manytomany_article_tag_aggregate_bool_exp_count
}

input _manytomany_article_tag_aggregate_bool_exp_count {
    arguments: [_manytomany_article_tag_select_column!]
    distinct: Boolean
    filter: _manytomany_article_tag_bool_exp
    predicate: Int_comparison_exp!
}

"order by aggregate values of table \"_manytomany.article_tag\""
input _manytomany_article_tag_aggregate_order_by {
    avg: _manytomany_article_tag_avg_order_by
    count: order_by
    max: _manytomany_article_tag_max_order_by
    min: _manytomany_article_tag_min_order_by
    stddev: _manytomany_article_tag_stddev_order_by
    stddev_pop: _manytomany_article_tag_stddev_pop_order_by
    stddev_samp: _manytomany_article_tag_stddev_samp_order_by
    sum: _manytomany_article_tag_sum_order_by
    var_pop: _manytomany_article_tag_var_pop_order_by
    var_samp: _manytomany_article_tag_var_samp_order_by
    variance: _manytomany_article_tag_variance_order_by
}

"input type for inserting array relation for remote table \"_manytomany.article_tag\""
input _manytomany_article_tag_arr_rel_insert_input {
    data: [_manytomany_article_tag_insert_input!]!
    "upsert condition"
    on_conflict: _manytomany_article_tag_on_conflict
}

"order by avg() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_avg_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"Boolean expression to filter rows from the table \"_manytomany.article_tag\". All fields are combined with a logical 'AND'."
input _manytomany_article_tag_bool_exp {
    _and: [_manytomany_article_tag_bool_exp!]
    _not: _manytomany_article_tag_bool_exp
    _or: [_manytomany_article_tag_bool_exp!]
    article: _manytomany_article_bool_exp
    article_id: Int_comparison_exp
    id: Int_comparison_exp
    tag: _manytomany_tag_bool_exp
    tag_id: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"_manytomany.article_tag\""
input _manytomany_article_tag_inc_input {
    article_id: Int
    id: Int
    tag_id: Int
}

"input type for inserting data into table \"_manytomany.article_tag\""
input _manytomany_article_tag_insert_input {
    article: _manytomany_article_obj_rel_insert_input
    article_id: Int
    id: Int
    tag: _manytomany_tag_obj_rel_insert_input
    tag_id: Int
}

"order by max() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_max_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"order by min() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_min_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"on_conflict condition type for table \"_manytomany.article_tag\""
input _manytomany_article_tag_on_conflict {
    constraint: _manytomany_article_tag_constraint!
    update_columns: [_manytomany_article_tag_update_column!]! = []
    where: _manytomany_article_tag_bool_exp
}

"Ordering options when selecting data from \"_manytomany.article_tag\"."
input _manytomany_article_tag_order_by {
    article: _manytomany_article_order_by
    article_id: order_by
    id: order_by
    tag: _manytomany_tag_order_by
    tag_id: order_by
}

"primary key columns input for table: _manytomany.article_tag"
input _manytomany_article_tag_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"_manytomany.article_tag\""
input _manytomany_article_tag_set_input {
    article_id: Int
    id: Int
    tag_id: Int
}

"order by stddev() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_stddev_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"order by stddev_pop() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_stddev_pop_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"order by stddev_samp() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_stddev_samp_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"Streaming cursor of the table \"_manytomany_article_tag\""
input _manytomany_article_tag_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: _manytomany_article_tag_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input _manytomany_article_tag_stream_cursor_value_input {
    article_id: Int
    id: Int
    tag_id: Int
}

"order by sum() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_sum_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

input _manytomany_article_tag_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: _manytomany_article_tag_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: _manytomany_article_tag_set_input
    "filter the rows which have to be updated"
    where: _manytomany_article_tag_bool_exp!
}

"order by var_pop() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_var_pop_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"order by var_samp() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_var_samp_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

"order by variance() on columns of table \"_manytomany.article_tag\""
input _manytomany_article_tag_variance_order_by {
    article_id: order_by
    id: order_by
    tag_id: order_by
}

input _manytomany_article_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: _manytomany_article_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: _manytomany_article_set_input
    "filter the rows which have to be updated"
    where: _manytomany_article_bool_exp!
}

"Boolean expression to filter rows from the table \"_manytomany.tag\". All fields are combined with a logical 'AND'."
input _manytomany_tag_bool_exp {
    _and: [_manytomany_tag_bool_exp!]
    _not: _manytomany_tag_bool_exp
    _or: [_manytomany_tag_bool_exp!]
    article_tags: _manytomany_article_tag_bool_exp
    article_tags_aggregate: _manytomany_article_tag_aggregate_bool_exp
    id: Int_comparison_exp
    name: String_comparison_exp
    sheesh: _manytomany_article_tag_bool_exp
    sheesh_aggregate: _manytomany_article_tag_aggregate_bool_exp
}

"input type for incrementing numeric columns in table \"_manytomany.tag\""
input _manytomany_tag_inc_input {
    id: Int
}

"input type for inserting data into table \"_manytomany.tag\""
input _manytomany_tag_insert_input {
    article_tags: _manytomany_article_tag_arr_rel_insert_input
    id: Int
    name: String
    sheesh: _manytomany_article_tag_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"_manytomany.tag\""
input _manytomany_tag_obj_rel_insert_input {
    data: _manytomany_tag_insert_input!
    "upsert condition"
    on_conflict: _manytomany_tag_on_conflict
}

"on_conflict condition type for table \"_manytomany.tag\""
input _manytomany_tag_on_conflict {
    constraint: _manytomany_tag_constraint!
    update_columns: [_manytomany_tag_update_column!]! = []
    where: _manytomany_tag_bool_exp
}

"Ordering options when selecting data from \"_manytomany.tag\"."
input _manytomany_tag_order_by {
    article_tags_aggregate: _manytomany_article_tag_aggregate_order_by
    id: order_by
    name: order_by
    sheesh_aggregate: _manytomany_article_tag_aggregate_order_by
}

"primary key columns input for table: _manytomany.tag"
input _manytomany_tag_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"_manytomany.tag\""
input _manytomany_tag_set_input {
    id: Int
    name: String
}

"Streaming cursor of the table \"_manytomany_tag\""
input _manytomany_tag_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: _manytomany_tag_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input _manytomany_tag_stream_cursor_value_input {
    id: Int
    name: String
}

input _manytomany_tag_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: _manytomany_tag_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: _manytomany_tag_set_input
    "filter the rows which have to be updated"
    where: _manytomany_tag_bool_exp!
}

"Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"Boolean expression to compare columns of type \"json\". All fields are combined with logical 'AND'."
input json_comparison_exp {
    _eq: json
    _gt: json
    _gte: json
    _in: [json!]
    _is_null: Boolean
    _lt: json
    _lte: json
    _neq: json
    _nin: [json!]
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}
